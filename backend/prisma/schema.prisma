generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id        Int      @id @default(autoincrement())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String?  @unique @map("email_address")
  phone     String?  @map("phone_number")
  address   String?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cargo     Cargo[]
}

model Ship {
  id               Int        @id @default(autoincrement())
  name             String
  registrationNo   String     @unique @map("registration_number")
  capacityInTonnes Float?     @map("capacity_in_tonnes")
  type             ShipType   @default(cargo_ship)
  status           ShipStatus @default(active)
  isActive         Boolean    @default(true) @map("is_active")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  crew             Crew[]
  shipments        Shipment[]
}

model Crew {
  id          Int      @id @default(autoincrement())
  shipId      Int?
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  role        CrewRole @default(Captain)
  phoneNumber String   @unique @map("phone_number")
  nationality String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  ship        Ship?    @relation(fields: [shipId], references: [id])
}

model Port {
  id                   Int        @id @default(autoincrement())
  name                 String
  country              String
  portType             String?    @map("port_type")
  coordinates          String?
  depth                Float?
  dockingCapacity      Int?       @map("docking_capacity")
  maxVesselSize        Float?     @map("max_vessel_size")
  securityLevel        String?    @map("security_level")
  customsAuthorized    Boolean?   @map("customs_authorized")
  operationalHours     String?    @map("operational_hours")
  portManager          String?    @map("port_manager")
  portContactInfo      String?    @map("port_contact_info")
  isActive             Boolean    @default(true) @map("is_active")
  createdAt            DateTime   @default(now()) @map("created_at")
  updatedAt            DateTime   @updatedAt @map("updated_at")
  shipmentsDestination Shipment[] @relation("DestinationPort")
  shipmentsOrigin      Shipment[] @relation("OriginPort")

  @@unique([name, country])
}

model Cargo {
  id          Int        @id @default(autoincrement())
  description String?
  weight      Float?
  volume      Float?
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  cargoType   CargoType  @default(general) @map("cargo_type")
  clientId    Int?       @map("client_id")
  client      Client?    @relation(fields: [clientId], references: [id])
  shipments   Shipment[]
}

model Shipment {
  id                Int            @id @default(autoincrement())
  departureDate     DateTime?      @map("departure_date")
  arrivalEstimate   DateTime?      @map("arrival_estimate")
  actualArrivalDate DateTime?      @map("actual_arrival_date")
  status            ShipmentStatus @default(pending)
  isActive          Boolean        @default(true) @map("is_active")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  cargoId           Int?           @map("cargo_id")
  destinationPortId Int?           @map("destination_port_id")
  originPortId      Int?           @map("origin_port_id")
  shipId            Int?           @map("ship_id")
  cargo             Cargo?         @relation(fields: [cargoId], references: [id])
  destinationPort   Port?          @relation("DestinationPort", fields: [destinationPortId], references: [id])
  originPort        Port?          @relation("OriginPort", fields: [originPortId], references: [id])
  ship              Ship?          @relation(fields: [shipId], references: [id])
}

enum ShipType {
  cargo_ship
  passenger_ship
  military_ship
  icebreaker
  fishing_vessel
  barge_ship
}

enum ShipStatus {
  active
  under_maintenance
  decommissioned
}

enum CrewRole {
  Captain
  Chief_Officer
  Able_Seaman
  Ordinary_Seaman
  Engine_Cadet
  Radio_Officer
  Chief_Cook
  Steward
  Deckhand
}

enum CargoType {
  perishable
  dangerous
  general
  other
}

enum ShipmentStatus {
  pending
  in_transit
  delivered
  delayed
  cancelled
}
